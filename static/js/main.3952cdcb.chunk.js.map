{"version":3,"sources":["constants.js","pages/about.js","components/project-card.js","components/anchor.js","pages/projects.js","pages/resume.js","App.js","serviceWorker.js","index.js"],"names":["CONSTANTS","name","About","ProjectCard","type","class","buttonNames","map","buildButton","typename","this","buildButtons","links","link","props","title","types","description","buildTypes","technologies","languages","buildLinks","React","Component","ICONS","github","linkedin","email","android_store","Anchor","href","url","icon","Project","Resume","id","src","NAME","App","className","to","path","exact","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3952cdcb.chunk.js","sourcesContent":["\nconst CONSTANTS = {\n  name: \"Rostyslav Khoptiy\"\n};\n\nexport default CONSTANTS;","import React from 'react';\n\nexport default function About() {\n  return (\n    <div>\n      <h2>About</h2>\n\n        This website is running on ReactJS.\n    </div>\n  );\n}\n","import React from 'react';\n\nexport class ProjectCard extends React.Component {\n\n  buildButton(name) {\n    return <button type=\"button\" class=\"btn btn-sm\" >{ name }</button>\n  }\n\n  buildButtons(buttonNames) {\n    return buttonNames.map((name) => this.buildButton(name))\n  }\n\n  buildTypes(typename, buttonNames) {\n    return ( \n      <li class=\"list-group-item card-tags\">\n          <div>\n              <b>{ typename }</b>\n          </div>\n          <div>\n            {this.buildButtons(buttonNames)}\n          </div>\n      </li>\n    )\n  }\n\n  buildLinks(links) {\n    return links.map((link) => <span>{link}</span>)\n  }\n\n  render() {\n\n    return (\n      <div class=\"card\">\n        <div class=\"card-body\">\n            <h2 class=\"card-title\">\n              <span>{ this.props.title } </span>\n              { this.buildButtons(this.props.types) }\n            </h2>\n            <p class=\"card-text\">{ this.props.description }</p>\n        </div>\n        <ul class=\"list-group list-group-flush\" >\n            { this.buildTypes(\"Tech: \", this.props.technologies)}\n            { this.buildTypes(\"Lang: \", this.props.languages)}\n        </ul>\n        <div class=\"card-body\">\n            { this.buildLinks(this.props.links) }\n        </div>\n    </div>\n    );\n\n  }\n}\n\n","import React from 'react';\n\n\nexport const ICONS = {\n  github: <i class=\"fab fa-github\"/>,\n  linkedin: <i class=\"fab fa-linkedin\"/>,\n  email: <i class=\"fas fa-envelope\"/>,\n  android_store: <i class=\"fab fa-google-play\"/>\n};\n\n\nexport default class Anchor extends React.Component {\n\n  render() {\n    return (\n      <a href={this.props.url}>{this.props.icon} {this.props.name} </a>\n    );\n\n  }\n}\n\n","import React from 'react';\n\nimport './projects.scss';\n\nimport {ProjectCard} from '../components/project-card.js';\nimport Anchor, { ICONS } from '../components/anchor.js';\n\nexport default function Project() {\n  return (\n    <div>\n      <h2>Projects</h2>\n\n        Here you can see some of the projects I have done.\n\n        <div class=\"card-columns\">\n\n          <ProjectCard \n            title=\"RMixer\" \n            description= {\n              <div>Android app for mixing music. Can generate basic sounds like, sinewaves, mix multiple tracks and export music</div>\n            } \n            types={['Hobby', 'App']} \n            technologies={['Xamarin', 'Android']} \n            languages={['C#']}\n            links={\n              [\n                <Anchor name=\"Source\" url='https://github.com/Ross65536/MobileSoundMixer' icon={ICONS.github} />,\n                <Anchor name=\"App\" url='https://play.google.com/store/apps/details?id=com.Ros.Sound_Mixer&hl=en' icon={ICONS.android_store} />\n              ]\n            }\n          />\n\n          <ProjectCard \n            title=\"Kivy Ballistics\" \n            description= {\n              <div>Android game. The player controls a turret stuck on a planet and tries to destroy other planets. Features realistic in-house space ballistics physics.</div>\n            } \n            types={['Hobby', 'App']} \n            technologies={['Kivy', 'Android']} \n            languages={['Python']}\n            links={\n              [\n                <Anchor name=\"Source\" url='https://github.com/Ross65536/kivy-ballistics' icon={ICONS.github} />\n              ]\n            }\n          />\n          {/* <ProjectCard title=\"card\" description=\"desc\"/>\n          <ProjectCard title=\"card\" description=\"desc\"/>\n          <ProjectCard title=\"card\" description=\"desc\"/>\n          <ProjectCard title=\"card\" description=\"desc\"/>\n          <ProjectCard title=\"card\" description=\"desc\"/>\n          <ProjectCard title=\"card\" description=\"desc\"/> */}\n\n        </div>\n\n    </div>\n  );\n}\n","import React from 'react';\nimport './resume.scss';\n\nconst FILE_NAME = \"cv.pdf\"\n\nexport default function Resume() {\n  return (\n    <div>\n      <h2>Resume</h2>\n\n      I'm a software engineer mostly interested in web-development, systems software and security.\n\n      <div id=\"resume_pdf_link\">\n        <a href={FILE_NAME}><i class=\"fas fa-file-pdf fa-lg\"></i> Download Resume (PDF)</a>\n      </div>\n\n      <div class=\"pdf_container\">\n        <embed src={FILE_NAME} type='application/pdf' class=\"resume_pdf\" />\n      </div>\n\n\n    </div>\n  );\n}\n","import './App.scss';\n\nimport React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\nimport CONSTANTS from './constants.js';\n\nimport About from './pages/about.js'\nimport Projects from './pages/projects.js'\nimport Resume from './pages/resume.js'\nimport Anchor, { ICONS } from './components/anchor.js';\n\nconst NAME = CONSTANTS.name;\nconst PROFESSION = \"Software Engineer\";\nconst GITHUB_URL = \"https://github.com/Ross65536\";\nconst LINKEDIN_URL = \"https://www.linkedin.com/in/rostyslav-khoptiy/\";\nconst ANDROID_PLAY_STORE = \"https://play.google.com/store/apps/developer?id=Ros+Software\";\nconst EMAIL = \"rk65536@protonmail.com\";\n\nfunction App() {\n  return (\n    <div className=\"App\" id=\"main\">\n      <Router>\n\n        {/* HEADER */}\n        <header id=\"header\">\n          <h1 id=\"name\">\n            <Link to=\"./\">{NAME}</Link>\n          </h1>\n          <h3 id=\"profession\">\n            {PROFESSION}\n          </h3>\n          <nav id=\"top-bar\">\n            <ul>\n              <li><Link to='./'>Projects</Link></li>\n              <li><Link to=\"resume\">Resume</Link></li>\n              <li><Link to=\"about\">About</Link></li>\n            </ul>\n          </nav>\n        </header>\n\n        {/* BODY */}\n        <div id=\"page-content\">\n          <Switch>\n            <Route path='*/about' >\n              <About />\n            </Route>\n            <Route path='*/resume'>\n              <Resume />\n            </Route>\n            <Route exact path=\"*/\">\n              <Projects />\n            </Route>\n          </Switch>\n        </div>\n\n        {/* FOOTER */}\n        <footer id=\"footer\">\n          <ul>\n            <li><Anchor name=\"Github\" url={GITHUB_URL} icon={ICONS.github} /></li>\n            <li><Anchor name=\"LinkedIn\" url={LINKEDIN_URL} icon={ICONS.linkedin}/></li>\n            <li><Anchor name=\"E-Mail\" url={\"mailto:\" + EMAIL} icon={ICONS.email}/></li>\n            <li><Anchor name=\"Android Store\" url={ANDROID_PLAY_STORE} icon={ICONS.android_store}/></li>\n          </ul>\n        </footer>\n\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}